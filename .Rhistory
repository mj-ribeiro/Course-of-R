}
}
ret = c( )
for (i in 1:n) {
if (i+1 < n){
ret[i+1] = log(IBOV[i+1]/IBOV[i])
}
}
ret
ret = rep(0,n )
for (i in 1:n) {
if (i+1 < n){
ret[i+1] = log(IBOV[i+1]/IBOV[i])
}
}
for (i in 2:n) {
if (i+1 < n){
ret[i+1] = log(IBOV[i+1]/IBOV[i])
}
}
rm(ret)
rm(ret)
for (i in 2:n) {
if (i+1 < n){
ret[i+1] = log(IBOV[i+1]/IBOV[i])
}
}
for (i in 2:n) {
if (i+1 < n){
ret = log(IBOV[i+1]/IBOV[i])
}
}
View(ret)
for (i in 1:n) {
if (i+1 < n){
ret = log(IBOV[i+1]/IBOV[i])
}
}
log(IBOV[1]/IBOV[1])
log(IBOV[2]/IBOV[1])
log(1/2)
IBOV[1]
IBOV[1]/IBOV[2]
bvcore = coredata(BVSP)
View(bvcore)
class(BVSP)
bvcore = index(dates)
View(bvcore)
bvcore = coredata(BVSP)
colnames(bvcore) = dates
rownames(bvcore) = dates
View(bvcore)
rownames(bvcore) = dates
bvcore[1, 4]
bvcore[1:5, 4]
bvcore[1:5, 4:2]
bvcore[1:5, 2:4]
bvcore[1:5, :4]
bvcore[1:5, 4:4]
bvcore[1:5, 4]
bvcore[1:5, :4]
bvcore[1:5, 4:]
bvcore[1:, 4]
bvcore = data.frame(bvcore)
View(bvcore)
rownames(bvcore) =  dates
View(bvcore)
bvcore[1:4, 1:4]
bvcore[1:4, 4]
names(bvcore)[4] = "IBOV"
View(bvcore)
bvcore[1: , 4]
bvcore[1:4, 4]
rm(ret)
bvcore[1:2505, 4]
IBOV = bvcore[1:2505, 4]
View(IBOV)
rm(IBOV)
bvcore <- bvcore[ ,4, drop=FALSE]
View(bvcore)
bvcore
bvcore[1]
bvcore[1]
bvcore[1]
bvcore[1]
bvcore[1:2]
bvcore[1:2, 1]
bvcore[1:1, 1]
bvcore[1, 1]
bvcore[2, 1]
bvcore[3, 1]
bvcore[3, 1]/bvcore[2, 1]
log(bvcore[3, 1]/bvcore[2, 1])
for (i in 1:n) {
if (i+1 < n){
bvcore$ret = log(bvcore[i+1, 1]/bvcore[i, 1])
}
}
View(bvcore)
for (i in 1:n) {
#if (i+1 < n){
bvcore$ret = log(bvcore[i+1, 1]/bvcore[i, 1])
}
View(bvcore)
for (i in 1:n){
print(i)
}
for (i in 1:n){
print(i)
}
log(bvcore[3, 1]/bvcore[2, 1])
log(bvcore[4, 1]/bvcore[3, 1])
for (i in 1:n) {
#if (i+1 < n){
bvcore$ret[i+1] = log(bvcore[i+1, 1]/bvcore[i, 1])
}
View(bvcore)
plot(bvcore[, 2])
plot(bvcore[ , 2], type='l')
plot(bvcore[ , 2], type='l', col='blue')
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
)
plot(bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
shapiro.test(bvcore[ , 2])
View(bvcore)
plot(bvcore[ , 2], dates, type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
plot(dates,bvcore[ , 2], type='l',
col='blue', ylab='Returns of IBOVESPA',
main='Evolution of Ibovespa returns')
hist(bvcore[ , 2])
hist(bvcore[ , 2], col = 'lightblue')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
shapiro.test(bvcore[ , 2])
shapiro.test(bvcore[ , 2]) #The null-hypothesis of this test is that the population is normally distributed.
jarque.bera.test(bvcore[ , 2])
jarque.bera.test(omit.na(bvcore[ , 2]))
jarque.bera.test(na.omit(bvcore[ , 2]))
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000))
curve(dnorm(x),add=T)
hist(rnorm(1000), ylim=c(0,0.5))
curve(dnorm(x),add=T)
hist(rnorm(1000), probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns')
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', density = T)
hist(bvcore[ , 2], col = 'lightblue', main = 'Histogram of IBOVESPA returns', probability = T)
curve(dnorm(x),add=T)
basicStats(bvcore[ , 2])
t.test(bvcore[ , 2], mu=0)
adf.test(bvcore[ , 2])
adf.test(na.omit(bvcore[ , 2]))
adf.test(na.omit(bvcore[ , 2]) )
bvcore[ , 2] = ifelse(is.na(bvcore[ , 2]), mean(bvcore[ , 2], na.rm=T ), bvcore[ , 2])
View(bvcore)
basicStats(bvcore[ , 2])
vol = garchFit(bvcore[ , 2] ~garch(1, 1), trace = FALSE)
summary(vol)
basicStats(bvcore[ , 2])
summary(vol)
fit =  fitted(vol)
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='Volatilidade do IBOV usando o GARCH(1,1)')
plot(fit, type='l', col='blue', ylab='Volatilidade',
main='IBOV volatility using GARCH(1,1)')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=10)
plot(fit)
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
fit = forecast(ar, h=30)
plot(fit)
library(mFilter)
filt = hpfilter(bvcore[ , 2])
filt = hpfilter(bvcore[ , 2], freq = 1600)
plot(filt)
#----------- ARIMA
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
par(mfrow=c(1,2))
acf(bvcore[ , 2])
pacf(bvcore[ , 2])
acf(bvcore[ , 2], main='Return IBOV')
#----------- ARIMA
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
#----------- ARIMA
window()
#----------- ARIMA
windows()
windows()
par(mfrow=c(1,2))
acf(bvcore[ , 2], main='Autocorrelation of IBOV returns')
pacf(bvcore[ , 2], main='Partial autocorrelation of IBOV returns')
ar = auto.arima(bvcore[ , 2], lambda = 'auto')
ar
54.5+543.95
54.5+543.95+1.55
1000*1.05
1000*0.05
5458.2+10*82.7
(5458.2+10*82.7)/76
35*94.4
99.8*10+96.55*13
(99.8*10+96.55*13)/23
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86)/48
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 20*82)/68
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 30*82)/68
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 30*82)/78
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 40*82)/78
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 40*82)/88
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 40*75)/88
(99.8*10+96.55*13+10*85.5+5*85.7+5*85.6+5*86+ 40*70)/88
3.6*4
15/9
400/1-0.6
400/(1-0.6)
160+0.6*900
1/(1-0.6)
13.85-13.42
0.43*60
13.9-13.42
13.9-13.42)*60
(13.9-13.42)*60
(13.92-13.42)*60
835.20-805.44
4^4
3^4
81/256
1000*(81/256)
1000/(1000*(81/256))
(1000/(1000*(81/256)))^(1/4)
2/3
1.333*3
4/3
1000*(81/256)*2^(-4)
256/81
(256/81)^(-1/4)
1000*(81/256)*1^(-4)
1000*(81/256)*2^(-4)
1000*(81/256)*1^(-4)
1000^(1/4)
1000^(1/4)*316.4^(3/4)
332/20
332/23.98
332/13.93
setwd("D:/Git projects/R course")
library(readxl)
tax <- read_excel("D:/Git projects/R course/tax_revenue.xls")
tax = reshape(data = tax,
idvar= "code",
varying = 2:20,  # o reshape será feito a partir da coluna 2, pq a do code não conta
v.names = 'tax',
sep= " ",
timevar= "year",
times = seq(2000, 2018, 1),    # o período é de 2000 a 2018
new.row.names= 1:10000,
direction = "long")
R = tax[ tax$code == c('CHN', 'BRA', 'ABW') ,  ]
R = tax[ tax$code == c('CHN', 'BRA') ,  ]
tax[ sort(tax$code),  ]
tax[ order(tax$code),  ]
tax = tax[ order(tax$code),  ]
View(tax)
tax[ tax$code == c('CHN', 'BRA', 'ABW') ,  ]
z = c(0, 12, 4, 5, 7)
order(z)
sort(z)
19.8+14+15
brics = tax[ tax$code == c('CHN', 'BRA', 'RUS') ,  ]   # utilizar o order antes de fazer isso
View(brics)
View(R)
rm(r)
rm(R)
tax[ tax$code == c('CHN', 'BRA', 'RUS') ,  ]
tax[ tax$code == c('CHN', 'BRA', 'RUS') & tax$year== c(2000, 2018),  ]
tax[ tax$code == c('CHN', 'BRA', 'RUS') | tax$year== c(2000, 2018),  ]
tax$code[c('CHN', 'BRA', 'RUS')]
tax$code[c('CHN', 'BRA', 'RUS'), ]
tax$code[c('CHN')]
tax$code['CHN']
tax$code[1:2]
brics = tax[ tax$code == c('CHN', 'BRA') ,  ]   # utilizar o order antes de fazer isso
View(brics)
tax[ tax$code == c('CHN', 'BRA', 'RUS') | tax$year== c(2000, 2018),  ]
tax[ tax$code == c('CHN', 'BRA', 'RUS') & tax$year== c(2000, 2018),  ]
tax[ tax$code == c('CHN', 'BRA', 'RUS') & tax$year== c(2000, 2018),  ]
View(tax)
tax[ tax$code == c('CHN'  ]
tax[ tax$code == c('CHN')  ]
tax[ tax$code == c('CHN'),  ]
View(tax)
chn = tax[ tax$code == c('CHN'),  ]
View(chn)
chn = tax[ tax$code == c('ZAF'),  ]
rm(brics)
rm(z)
bra = tax[ tax$code == c('BRA'),  ]
rus = tax[ tax$code == c('RUS'),  ]
ind = tax[ tax$code == c('IND'),  ]
zaf = tax[ tax$code == c('ZAF'),  ]
brics = data.frame(chn, bra, rus, ind, zaf)
####
library(fGarch)
basicStats(brics)
View(brics)
basicStats(bra)
View(bra)
basicStats(bra$tax)
tax <- read_excel("D:/Git projects/R course/tax_revenue.xls")
tax = reshape(data = tax,
idvar= "code",
varying = 2:20,  # o reshape será feito a partir da coluna 2, pq a do code não conta
v.names = 'tax',
sep= " ",
timevar= "year",
times = seq(2000, 2018, 1),    # o período é de 2000 a 2018
new.row.names= 1:10000,
direction = "long")
tax = tax[ order(tax$code),  ]
attach(tax)
filt1 = tax$year>=1990 & (tax$`Country Code`== 'CHN' | tax$`Country Code`== 'BRA' | tax$`Country Code`== 'ZAF' | tax$`Country Code`== 'IND' | tax$`Country Code`== 'RUS')
filt1 = tax$year>=1990 & (tax$`code`== 'CHN' | tax$`code`== 'BRA' | tax$`code`== 'ZAF' | tax$`code`== 'IND' | tax$`code`== 'RUS')
data = tax[filt1,  ]
View(data)
library(foreign)
coplot(tax ~ year|`Code`, type="l", data=data) # Lines
coplot(tax ~ year|`code`, type="l", data=data) # Lines
table(data)
table(data$code)
table(data$tax)
table(data$code)
factor(data$code)
fator = factor(data$code)
fator
by(data$tax, fator, mean)
by(data$tax, fator, mean, omit.na())
by(data$tax, fator, mean, na.omit())
by(data$tax, fator, mean na.omit())
by(data$tax, fator, summary)
by(data$tax, fator, summary)
par(mfrow=c(3,2))
by(data$tax, fator, plot)
by(data$tax, fator, plot(type='l'))
by(data$tax, fator, plot(data$tax, type='l'))
par(mfrow=c(3,2))
by(data$tax, fator, plot(data$tax, type='l'))
by( fator, plot(data$tax, type='l'))
par(mfrow=c(3,2))
by( fator, plot(data$tax, type='l'))
plot(data$tax, type='l', by(fator))
a = plot()
a = plot(type='l')
g = function(p){
plot(p, type='l')
}
by(data$tax, fator, g(data$tax))
by(fator, g(data$tax))
g(data$tax['BRA'])
coplot(tax ~ year|`code`, type="l", data=data) # Lines
library(car)
windows()
scatterplot(tax ~ year|`code`, boxplots=FALSE, smooth=T, reg.line=FALSE, data=data)
plot(factor(data$`code`), data$tax)
par(mfrow=c(1))
par(mfrow=c(1,1))
plot(factor(data$`code`), data$tax)
plot(factor(data$`code`), data$tax, xlabel='Países')
par(mfrow=c(1,1))
plot(factor(data$`code`), data$tax, xlabel='Países')
plot(factor(data$`code`), data$tax, ylabel='Países')
plot(factor(data$`code`), data$tax, ylab='Países')
par(mfrow=c(1,1))
plot(factor(data$`code`), data$tax,
ylab='proporção entre carga tributária e PIB',
xlab= 'Países dos BRICS')
window()
windows()
par(mfrow=c(1,1))
plot(factor(data$`code`), data$tax,
ylab='Proporção entre carga tributária e PIB',
xlab= 'Países dos BRICS')
v = ggplot(data=data, aes(x=year, y=tax))
windows()
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v = ggplot(data=data, aes(x=year, y=tax))
windows()
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v = ggplot(data=data, aes(x=year, y=tax))
library(ggplot2)
v = ggplot(data=data, aes(x=year, y=tax))
windows()
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`Country Code`))
windows()
v +
geom_line(binwidth=10,colour='black') +
facet_grid(factor(data$`code`))
tapply(data$tax, data$`code`, summary)
par(mfrow=c(2, 3))
tapply(data$tax, data$`code`,
plot)
plot(data$tax, data$year)
f2 = data$`code`== 'BRA'
ano = data[f2, 'year']
plot(ano$year,  bra$tax ,
type = 'l',
xlab = 'Year',
ylab = 'Tax revenue')
bra = data[f2, 'tax']
View(bra)
plot(ano$year,  bra$tax ,
type = 'l',
xlab = 'Year',
ylab = 'Tax revenue')
par(mfrow=c(1,1))
plot(ano$year,  bra$tax ,
type = 'l',
xlab = 'Year',
ylab = 'Tax revenue')
library(tseries)
library(timeSeries)
library(forecast)   # auto.arima
library(quantmod)
library(fGarch)
library(mFilter)
getSymbols('^VIX', src='yahoo', from= '2010-01-01')
View(VIX)
View(VIX)
vix = VIX[ ,4]
plot(vix, type='l')
getSymbols('^VIX', src='yahoo', from= '2007-01-01')
vix = VIX[ ,4]
plot(vix, type='l')
plot(vix, type='l', xlab='date',
ylab= 'VIX',
main= 'Evolution of VIX')
plot(vix, type='l', xlab='date',
ylab= 'VIX',
main= 'Evolution of VIX')
plot(vix, type='l', xlab='date',ylab= 'VIX')
plot(vix, type='l', xlab ='date', ylab= 'VIX')
par(mar = c(5, 4, 4, 2) + 0.1)
plot(vix, type='l', xlab ='date', ylab= 'VIX')
par(mar = c(4, 3, 3, 2) + 0.1)
plot(vix, type='l', xlab ='date', ylab= 'VIX')
par(mar = c(6, 6, 6, 6) + 0.1)
plot(vix, type='l', xlab ='date', ylab= 'VIX')
plot(vix, type='l', xlab ='date', ylab= 'VIX')
plot(vix, type='l', xlab ='date', ylab= 'VIX')
plot(vix, type='l', xlab ='', ylab= 'VIX')
mtext("Easting", side=1, line=3, font=2)
plot(vix, scale.frac = 0.6,main="",
xlab="",ylab="",axes=TRUE)
mtext("Date", side=1, line=3, font=2)
mtext("VIX", side=2, line=3, font=2)
mtext("Evolution of VIX", side=3, line=1, font=2, cex=1.2)
plot(vix, scale.frac = 4,main="",
xlab="",ylab="",axes=TRUE)
mtext("Date", side=1, line=3, font=2)
mtext("VIX", side=2, line=3, font=2)
mtext("Evolution of VIX", side=3, line=1, font=2, cex=1.2)
plot(vix, scale.frac = 40,main="",
xlab="",ylab="",axes=TRUE)
mtext("Date", side=1, line=3, font=2)
mtext("VIX", side=2, line=3, font=2)
mtext("Evolution of VIX", side=3, line=1, font=2, cex=1.2)
plot(vix, scale.frac = 0,main="",
xlab="",ylab="",axes=TRUE)
mtext("Date", side=1, line=3, font=2)
mtext("VIX", side=2, line=3, font=2)
mtext("Evolution of VIX", side=3, line=1, font=2, cex=1.2)
plot(vix, scale.frac = 0.6,main="",
xlab="",ylab="",axes=TRUE)
mtext("Date", side=1, line=3, font=2)
mtext("VIX", side=2, line=3, font=2)
mtext("Evolution of VIX", side=3, line=1, font=2, cex=1.2)
getSymbols("^BVSP", src="yahoo", from="2007-01-01")
IBOV = BVSP[, 4]
cor(vix, IBOV)
View(IBOV)
length(IBOV)
length(vix)
index = is.na(IBOV) == F
IBOV = IBOV[index, ]
View(IBOV)
length(IBOV)
