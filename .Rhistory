tau_w =  matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
tau_h = matrix(runif(i*r, -1, 1), nrow=i, ncol=r )
x2 = matrix(c(tau_w, tau_h, w), nrow = i*3, ncol = r)
x2
w
x2 = rbind(c(tau_w, tau_h, w))
x2
install.packages('caRamel')
library('caRamel')
res = caRamel(x1, obj)
View(res)
res = caRamel(x1, func=obj)
res = caRamel(nobj=3, x1, func=obj)
res = caRamel(nobj=3, nvar=x1, func=obj)
res = caRamel(nobj=1, nvar=3, func=obj)
res = caRamel(nobj=2, nvar=3, func=obj)
res = polyopt(nobj=2, nvar=3, func=obj)
res = polyopt(x1, obj)
res = polyopt(x1, obj, gr=NULL)
df = data.frame(tau_w, tau_h, w)
df[1]
df[2]
df[3]
View(df)
rm(df)
w = runif(i*r, 0, 1)
tau_w =  runif(i*r, -1, 1)
tau_h = runif(i*r, -1, 1)
df = data.frame(tau_w, tau_h, w)
df[3]
df[1]
View(df)
View(df)
res = polyopt(x1, obj, gr=NULL)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
obj(x1)
w_r = w_rf()
obj(x1)
res = solnp(x1,      #starting values
obj,   #function to optimise
LB=c(rep(0, length(x1))), #lower bound for parameters i.e. greater than zero
UB=c(rep(1, length(x1)))) #upper bound for parameters i.e less than one
res = optim(x1,      #starting values
obj)   #function to optimise
knitr::opts_chunk$set(echo = FALSE)
x = rnorm(1000, 0, 1)
hist(x, breaks = 25, col = 'lightgreen)
x = rnorm(1000, 0, 1)
hist(x, breaks = 25, col = 'lightgreen')
knitr::opts_chunk$set(echo = FALSE)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
knitr::opts_chunk$set(echo = FALSE)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
summary(reg)
seed(1)
set.seed(1)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
summary(reg)
knitr::opts_chunk$set(echo = FALSE)
set.seed(1)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
#summary(reg)
knitr::kable(reg)
View(reg)
set.seed(1)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
knitr::kable(summary(reg))
set.seed(1)
x = rnorm(1000)
y = rnorm(1000)
reg = lm(x~y)
summary(reg)
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
df = read.csv('naive_base.csv')
df = read.csv('naive_base.csv')
head(df)
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
head(df)
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
knitr::kable(head(df))
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
knitr::kable(head(df))
---
title: "Naive Bayes in R language"
author: "Marcos J Ribeiro"
date: "07/05/2020"
fontsize: 9pt
output:
beamer_presentation:
theme: "AnnArbor"
colortheme: "dolphin"
fonttheme: "structurebold"
---
title: "Naive Bayes in R language"
author: "Marcos J Ribeiro"
institute: 'FEARP-USP'
date: "07/05/2020"
fontsize: 8pt
output:
beamer_presentation:
theme: "AnnArbor"
colortheme: "dolphin"
fonttheme: "structurebold"
slide_level: 2
---
library(tensorflow)
library(tseries)
library(timeSeries)
library(forecast)   # auto.arima
library(quantmod)
library(fGarch)
library(rugarch)
#---- Get data
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-12-01',
to = '2020-04-01',
#periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
#----- returns
ret = diff(log(ibov))
colnames(ret) = c('ret')
ret = ret[is.na(ret)==F]  # Drop na to work
#---- GARCH Model
spec1 = ugarchspec(variance.model=list(model="fGARCH",
garchOrder=c(1,1), submodel='TGARCH'),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE, archm=T),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
garch2
ts.plot(sigma(garch2))
plot(ret**2)
windows()
for(i in 1:(length(ret)-1)){
plot(as.vector( ret[1:(1+i)]), col='blue')
}
library(vars)
x = rnorm(1000)
y = rnorm(1000)
vmat = as.matrix(cbind(y, x))
vmat
head(vmat)
tail(vmat)
vfit = VAR(vmat)
summary(vfit)
irf(vfit)
plot(irf(vfit))
summary(vfit)
vfit
vfit = VAR(vmat, p=2)
summary(vfit)
curve(x)
curve(x)
curve(dnorm(x))
curve(dnorm(k, mean = 0, sd=1))
call(x)
N <- 40
x1 <- 10
x2 <- 20
b1 <- 100
b2 <- 10
mu <- 0
sig2e <- 2500
sde <- sqrt(sig2e)
yhat1 <- b1+b2*x1
yhat2 <- b1+b2*x2
curve(dnorm(x, mean=yhat1, sd=sde), 0, 500, col="blue")
curve(dnorm(k, mean=yhat1, sd=sde), 0, 500, col="blue")
rm(x)
N <- 40
x1 <- 10
x2 <- 20
b1 <- 100
b2 <- 10
mu <- 0
sig2e <- 2500
sde <- sqrt(sig2e)
yhat1 <- b1+b2*x1
yhat2 <- b1+b2*x2
curve(dnorm(x, mean=yhat1, sd=sde), 0, 500, col="blue")
curve((k))
curve((x))
curve((x^2))
curve((x^3))
curve((x^3), xlim = c(-1,1))
curve((x), xlim = c(-1,1))
plot(y)
curve((x), xlim = c(-1,1))
plot(rnorm(30), col='lightblue')
curve((x), xlim = c(-1,1), add=T)
curve((x), xlim = c(-1,1), add=T)
curve((x), xlim = c(-1,1))
plot(rnorm(30), col='lightblue')
plot(rnorm(30,0,1), col='lightblue')
plot(rnorm(30,0,1), col='lightblue')
curve((x), add=T)
plot(rnorm(30,0,1), col='lightblue')
curve((x^2), add=T)
curve((x+2), add=T)
curve((x+2X), add=T)
curve((x+2x), add=T)
curve((x+2*x), add=T)
curve((x+2*x), add=T)
plot(rnorm(30,0,1), col='lightblue')
curve((x+2*x), add=T)
curve((2*x+2*x), add=T)
curve((0.8*x+2*x), add=T)
curve((0.01x), add=T)
curve((0.01*x), add=T)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='lightblue')
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray')
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19, size=3)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T, col='red')
curve(dnorm(x))
curve(dnorm(x), xlim=c(-1,1))
curve(dnorm(x), xlim=c(-3,3))
curve(dnorm(x), xlim=c(-4,4))
curve(dnorm(x), xlim=c(-6,6))
curve(dnorm(x), xlim=c(-8,8))
write.csv(ret, 'ret')
write.table(ret, 'ret')
write.xlsx(ret, 'ret')
library(xlsx)
write.xlsx(ret, 'ret')
write.xlsx(ret, 'c:/ret.xlsx')
write.xlsx(ret,"C:/Users/user/Documents/ret.xlsx")
spec2 = ugarchspec(variance.model=list(model="sGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model="norm")
garch3 = ugarchfit(spec = spec2, data= ret)
garch3
spec1 = ugarchspec(variance.model=list(model="fGARCH",
garchOrder=c(1,1), submodel='TGARCH'),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE, archm=T),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
garch2
sd(ret)
library(sn)
curve(dsn(x))
curve(dsn(x), ylim=c(-8,8))
curve(dsn(x), ylim=c(0,8))
curve(dsn(x, xi = 2), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22))
curve(dsn(x, xi = 22, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 3, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(-8,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,0.8))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 0.11, alpha = 0.22))
curve(dsn(x, omega = 0.21, alpha = 0.22))
curve(dsn(x, omega = 0.41, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 2))
curve(dsn(x, omega = 0.1, alpha = 10))
curve(dsn(x, omega = 0.1, alpha = 100))
curve(dsn(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.11))
curve(dst(x, omega = 1, alpha = 11))
curve(dst(x, omega = 0.9, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 0.11))
rst(x, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11)
rst(100, omega = 0.2, alpha = 0.11, xi = 2)
rst(100, omega = 0.2, alpha = 0.11, xi = 0)
rst(100, omega = 0.2, alpha = 0.11, xi = 0, nu = 2)
sin(30)
sin(30°)
sin(30)
sin(pi/6)
tan(pi/6)
curve(sin(x))
curve(sin(x), xlim = c(-3,3))
curve(sin(x), xlim = c(-30,30))
curve(sin(x), xlim = c(-10,10))
line(h=0)
aline(h=0)
abline(h=0)
curve(tan(x), xlim = c(-10,10))
curve(tan(x), xlim = c(-10,10))
abline(h=0)
curve((x), xlim = c(-10,10))
abline(v=0)
curve((x), xlim = c(0,10))
abline(v=0)
abline(v=10)
curve((x), xlim = c(0,10))
abline(v=10)
atan(1)
atan(pi)
pi/4
tan(pi/3)
tan(2*pi/3)
fd = function(x, alpha){
disf = exp(-x^alpha)
}
fd(2, 1)
fd = function(x, alpha){
disf = exp(-x^alpha)
return(disf)
}
fd(2, 1)
fd(0.2, 1)
curve(fd(x, 1))
curve(fd(x, 1), xlim = c(-10,10))
fd = function(x, alpha){
disf = exp(-x^(-alpha))
return(disf)
}
curve(fd(x, 1), xlim = c(-10,10))
curve(fd(x, 1), xlim = c(0,10))
curve(fd(x, 1), xlim = c(0,4))
install.packages('Rtolls40')
install.packages('Rtolls')
library(installr)
updateR()
updateR()
install.packages('Rtolls')
install.packages(c("fGarch", "forecast", "installr", "quantmod", "rugarch", "timeSeries", "tseries", "vars", "xlsx"))
install.packages('Rtolls')
install.packages('Rtolls40')
install.packages('rtolls40')
curve(x^0.4)
curve(x^0.4, ylim = c(0, 4))
curve(x^0.4, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.01, ylim = c(0, 1))
curve(x^0.001, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^1, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.4, ylim = c(0, 1), add=T)
install.packages("knitr")
setwd("D:/Git projects/college_works/monitoring_macro")
# see : https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-41612017000100039
library(GetBCBData)
library('xts')
# inflation - Índice nacional de preços ao consumidor-amplo (IPCA)
inf = gbcbd_get_series(433, first.date= '1981-01-01', last.date = '2020-04-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = inf$ref.date
inf[,1]=NULL
colnames(inf) = 'inf'
inf = xts(inf, order.by = data)
# diff inflation
dinf = diff(inf)
colnames(dinf) = 'dinf'
# unemployment  - Taxa de desocupação - PNADC
des = gbcbd_get_series(24369, first.date= '1981-01-01', last.date = '2020-04-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data1 = des$ref.date
des[,1]=NULL
colnames(des) = 'des'
des = xts(des, order.by = data1)
install.packages("knitr")
library(ggplot2)
df = data.frame(des, dinf[index(des)],inf[index(des)])
data3 = index(inf)
dfinf = data.frame(data3, inf)
ggplot(data=dfinf, aes(y=`inf`, x=`data3`), alpha=0.5)+geom_line()
plot(des)
View(des)
install.packages("haven")
setwd("D:/Git projects/R course")
library(ggplot2)
library(haven)
df <- read_dta("D:/DOUTORADO/Others/painel felicidade/Estatística.dta")
attach(df)
f1 = df[year>2010, ]
#f1 = na.omit(f1)
#--------------------------- GRAPHS
g1 = ggplot(data = f1, aes(x= hc, y=cresppc,
colour=rendacod, size=lld,
alpha=I(0.5)))+geom_point()
g1
g2 = g1+facet_grid(.~year)+
scale_color_gradientn(colours = rainbow(4))+
labs(color='Classificação \nde renda', size='Cantril \nLadder',
x='Capital Humano', y= 'Taxa de crescimento do PIB per capita')+
theme(axis.title.x= element_text(colour = 'black', size = 10),
axis.title.y = element_text(colour = 'black', size =10) )
g1 = ggplot(data = f1, aes(x= hc, y=cresppc,
colour=rendacod, size=lld,
alpha=I(0.5)))+geom_point()
g2 = g1+facet_grid(.~year)+
scale_color_gradientn(colours = rainbow(4))+
labs(color='Classificação \nde renda', size='Cantril \nLadder',
x='Capital Humano', y= 'Taxa de crescimento do PIB per capita')+
theme(axis.title.x= element_text(colour = 'black', size = 10),
axis.title.y = element_text(colour = 'black', size =10) )
windows()
g2
View(f1)
g3 = ggplot(data = f1, aes(x= cresppc, y=lld,
alpha=I(0.5)))+geom_point()
g3
View(f1)
g3 = ggplot(data = f1, aes(x= cresppc, y=lld,
alpha=I(0.5)))+geom_point() +
geom_text(aes(label=CountryCode), size=3)
g3
g3 = ggplot(data = f1, aes(x= cresppc, y=lld,
alpha=I(0.5)))+
geom_text(aes(label=CountryCode), size=3)
g3
g3 = ggplot(data = f1, aes(x= cresppc, y=lld,
alpha=I(0.5)))+
geom_text(aes(label=CountryCode), size=4, color='blue')
g3
View(dinf)
View(f1)
View(f1)
f2 = df[year==2015, ]
g3 = ggplot(data = f2, aes(x= cresppc, y=lld,
alpha=I(0.5)))+
geom_text(aes(label=CountryCode), size=4, color='blue')
g3
g3 = ggplot(data = f2, aes(x= cresppc, y=lld,
alpha=I(0.5)))+
geom_text(aes(label=CountryCode), size=4)
windows()
g3
c1 = seq(1, 5,1)
c2 = rnorm(5)
c3 = seq(-44, -40, 1)
C = rbind(c1,c2,c3)
nr = c('j', 'k', 'l')
nc = c('l1', 'l2', 'l3', 'l4', 'l5')
colnames(C) = nc
rownames(C) = nr
C
C['j', 'l4']
C['k', 'l5']  #Or
C[1, 2]
d = seq(1, 20, 1)
A = matrix(d, 4, 5)
A
A = matrix(d, 4, 5, byrow = TRUE)
vec = c('a', 'b', 'c')
t = rep(vec, each=3)
A1 = matrix(t, 3, 3)
A1
vec = c(2, 22, 34, 0, 67,3, 4, 6, 7, 80)
vec = c(2, 22, 34, 0, 67,3, 4, 6, 7, 80)
vec[1:5]
is.numeric(vec)
is.integer(vec)
is.character(vec)
is.double(vec)
typeof(vec)
vec1 = c('b', 'nn', 'k')
is.character(vec1)
typeof(vec2)
vec2 = c(3, 'b', 'nn', 'k')
typeof(vec2)
rep(2, 10)
rep(2, 100)
rep(2, 1000)
as.double(3)
is.double(3)
is.double(3.0)
is.double(3.1)
is.double(3e1000)
v = c(NaN, 1, 2, 3,7)
is.na(v)
